'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var express = require('express');
var assert = require('assert');

function validateInput(input) {
  assert.ok(Array.isArray(input), 'definition argument must be an array');
  input.forEach(function (defn) {
    assert.ok((typeof defn === 'undefined' ? 'undefined' : _typeof(defn)) === 'object', 'definition array must only contain objects');
    assert.ok(defn.path, 'definition array objects must contain a path property');
    assert.ok(typeof defn.path === 'string', 'definition array objects path property must be a string');
    if (!defn.children) {
      assert.ok(defn.callback, 'When children are not specified, callback must be provided');
      assert.ok(defn.method, 'When children are not specified, method must be provided');
      if (defn.method) {
        assert.ok(typeof defn.method === 'string', 'If defined, method must be a string');
      }
      if (defn.middleware) {
        assert.ok(Array.isArray(defn.middleware), 'Middleware if specified must be an array of functions');
        defn.middleware.forEach(function (middleware) {
          assert.ok(typeof middleware === 'function', 'Middleware must be a function');
        });
      }
      assert.ok(typeof defn.callback === 'function', 'Callback must be a function');
    } else {
      assert.ok(Array.isArray(defn.children), 'Property children must be an array');
    }
  });
}

module.exports = function routerFromDefinition(definition) {
  validateInput(definition);

  var router = express.Router({ mergeParams: true });
  definition.forEach(function (defn) {
    if (!defn.children || defn.children.length === 0) {
      var middleware = defn.middleware || [];
      router[defn.method].apply(router, [defn.path].concat(_toConsumableArray(middleware), [defn.callback]));
    } else {
      router.use(defn.path, routerFromDefinition(defn.children));
    }
  });
  return router;
};