'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var assert = require('assert');

module.exports = function mapRouteFunctionToObjects(routeDefinitionFunction) {
  var routeDefinitionObjects = [];
  var indexCreated = false;
  var context = {
    route: function route(name, options, callback) {
      var args = Array.from(arguments);
      if (args.length > 3 || args.length < 1) {
        throw new Error('Invalid number of arguments to this.route');
      }
      if (options && options.hasOwnProperty('method')) {
        if (['get', 'put', 'patch', 'post', 'delete'].indexOf(options.method) === -1) {
          throw new Error('Invalid http verb given to `method` option');
        }
      }
      assert.ok(typeof name === 'string', 'name argument must be a string');
      if (options && !callback) {
        assert.ok((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' || typeof options === 'function', 'Invalid second argument given to this.route. Should be a function or options argument.');
      }
      if (options && callback) {
        assert.ok(typeof callback === 'function', 'Invalid third argument given to this.route. Should be a function.');
      }
      if (typeof options === 'function') callback = options;
      if (!options && !callback) options = {};
      if (!indexCreated) {
        routeDefinitionObjects.push({
          name: 'index',
          path: '/',
          method: options.method || 'get',
          resetNamespace: options.resetNamespace || false,
          children: []
        });
        indexCreated = true;
      }
      var routeDefinitionObject = {
        name: name,
        path: options.path || '/' + name,
        method: options.method || 'get',
        resetNamespace: options.resetNamespace || false,
        children: []
      };
      routeDefinitionObjects.push(routeDefinitionObject);
      if (typeof callback === 'function') {
        routeDefinitionObject.children = mapRouteFunctionToObjects(callback);
      }
    }
  };
  routeDefinitionFunction.call(context);
  return routeDefinitionObjects;
};